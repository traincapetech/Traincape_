<<<<<<< HEAD
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
=======
>>>>>>> 483e8a211b47a7f5a94f042ba4a57e95406f49fa
import toDate from './toDate';
export default function isAfter(date, options) {
  // For backwards compatibility:
  // isAfter(str [, date]), i.e. `options` could be used as argument for the legacy `date`
<<<<<<< HEAD
  var comparisonDate = (_typeof(options) === 'object' ? options.comparisonDate : options) || Date().toString();
=======
  var comparisonDate = (options === null || options === void 0 ? void 0 : options.comparisonDate) || options || Date().toString();
>>>>>>> 483e8a211b47a7f5a94f042ba4a57e95406f49fa
  var comparison = toDate(comparisonDate);
  var original = toDate(date);
  return !!(original && comparison && original > comparison);
}